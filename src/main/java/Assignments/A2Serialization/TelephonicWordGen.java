package Assignments.A2Serialization;

import java.util.*;
import java.io.*;

public class TelephonicWordGen {

    /**
     * makes the initial call to recursive word generation and creates the list of results which is written to a .txt file
     * @param phoneNumber a string of digits that respresents a word (0 and 1 exclusive)
     * @param correspondence a map that relates digits to a list of characters
     * @param output the path to the .txt output
     */
    public static void getWord(int phoneNumber, Map<Character, List<String>> correspondence, Formatter output) {
        List<String> result = new ArrayList<>();
        generateWords(phoneNumber, 0, "", correspondence, result);

        // Write each generated word to the output
        for (String word : result) {
            output.format("%s%n", word);
        }
    }

    /**
     * a recursive function that interates over each digit in the {@code phoneNumber} and relates it to the list of
     * letters in {@code correspondence} for each letter the function is recursivley called until the word is of length
     * {@code phoneNumber.length()}
     * @param phoneNumber a string of digits that represents a word (does not include 0 or 1
     * @param index the position of the phone number being read initialized as 0
     * @param currentWord the current word that grows as the function is recursivley called
     * @param correspondence the map that related digits to a list of characters
     * @param result the list of words generated by the function
     */
    private static void generateWords(int phoneNumber, int index, String currentWord, Map<Character, List<String>> correspondence, List<String> result) {
        if (index == String.valueOf(phoneNumber).length()) {
            result.add(currentWord);
            return;
        }

        char digit = String.valueOf(phoneNumber).charAt(index);


        List<String> letters = correspondence.get(digit);
            for (String letter : letters) {
                generateWords(phoneNumber, index + 1, currentWord + letter, correspondence, result);

        }
    }

    public static void main(String[] args) {
        Map<Character, List<String>> correspondence = new HashMap<>();
        // Add entries to the dictionary
        correspondence.put('2', List.of("A", "B", "C"));
        correspondence.put('3', List.of("D", "E", "F"));
        correspondence.put('4', List.of("G", "H", "I"));
        correspondence.put('5', List.of("J", "K", "L"));
        correspondence.put('6', List.of("M", "N", "O"));
        correspondence.put('7', List.of("P", "R", "S"));
        correspondence.put('8', List.of("T", "U", "V"));
        correspondence.put('9', List.of("W", "X", "Y"));

        String filePath = "src/main/java/Assignments/A2Serialization/logs/phonicword.txt";
        Scanner input = new Scanner(System.in);
        try {
            System.out.println("enter a 7 digit phone number, please omit any dashes (-)");
            int phoneNumber = input.nextInt();
            if (String.valueOf(phoneNumber).length() != 7)
            {throw new IllegalArgumentException("phone number must be 7 digits");}
            try (Formatter output = new Formatter(filePath)) {
                getWord(phoneNumber, correspondence, output);
            }
            catch (Exception e) {
                System.out.println(e);
            }
        }
            catch (InputMismatchException e) {
                System.out.println("the number you entered either isnt a number or was an invalid format");
                System.out.println("example of invalid inputs:");
                System.out.println("879-1234");
                System.out.println("valid equivalent");
                System.out.println("8791234");
            }
        catch (Exception e) {
            System.out.println(e);
        }


    }
}
